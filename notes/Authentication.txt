Authentication using Mongo and express.

1) create routes in src.
2) create authRoutes.js in routes.

const express = require('express');
const router = express.Router();

router.post('/signup', (req, res) => {
    doWhatever;
})

module.exports = router;

3) import it in index.js
4) in index.js: app.use(authRoutes);

______
Can be testes using POSTMAN application since we cannot send post requiests
from url.

______
JWT (JSON web token).

* string with some identifying information.
* can be used to prove identity
* is created using a key known only to the server
* without the key it's impossible to create a new one or change the existing one
* After authentication we send the user their web token and 
add it to any request from that user later.

* server sends auth with signed hash of it. So, if someone changes it,
hash will not match. And nobody can make the same hash since they key is only
known to the server.


Use:
import 'jsonwebtoken'
token = jwt.sign({userID: user._id}, secretKey)


in middleware/requireAuth.js:
** Check that the user has authorisation in headers.

const user = mongoose.model('User');
module.exports = (req, res, next) => {
    const {authorisation} = req.headers;

    if (!authorisation) {
        res.status(401).send({error: 'you must be logged in'})
    }

    jwt.verify(token, password, function(err, payload));
    function has err if there was some kind of error or payload with 
    information in token otherwise.

    const user = await User.findByID(userID);
    req.user = user; -- just in case next function will need user.
    next();
}

add it to the request handler as a second argument.

______________
Hashing and salting.

//To save hash instead of real passwords.

in User.js: [This operation will be executed just before save]
UserSchema.pre('save', function(next) {
    if(!this.isModified('password')) {
        return next(); //if user is not attempting to modify the password
    }
    bcrypt.getSalt(difficulty, (err, salt) => {
        {
            check for error.
            bcrypt.hash(user.password, salt, (err, hash) => {
                check err.
                user.password = hash;
                next();
            } )
        }
    })

});


//To compare password with stored value.

userSchema.methods.comparePasswords = function(candidatePassword) => {
    return new Promise(resolve, reject) => {
        bcrypt.compare(candidatePassword, user.password, (err, isMatch) => {
            check for error -> reject;
            check for non match -> reject;
            resolve with true;
            
        })
    }
}

________
To use all API in an application.
******
npm install axios
import axios in api folder.
export default axios.create({
    baseURL: ''
})