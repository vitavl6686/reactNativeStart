User Navigation
- - - - - - - - 

Buttons in React Native:
1) <Button> is a primitive component. Very basic. 
2) TouchableOpacity is very customisable, can detect
a press on just about any component. 

__
<Button />

*need a prop 'title = String'
*onPress = {function}

___
<TouchableOpacity> </TouchableOpacity>

*Between tags we add any elements we want to be monitored for pressing
* onPress as a prop of TouchableOpacity works in a usual way

___
Idea: we can send props with a custom component.
It's the argument of the lambda function we create when create a component.

when we use StackNavigator, the props.navigation is added to the component function
We can use props.navidation.navigate(screenName) in onPress of buttons.

___
Small addition.

We can use ({navigation}) to access only props.navidation

__________
Natigators in react native.
******

"react-natigation" library:
-- Stack navigator
-- Drawer navigator
    ** the list at the side of the page
-- Bottom tab navigator
    ** tab bar at the bottom of the screen
--Switch
    ** the screen in cut from the other screens

___
USE:
import { createAppContainer } from 'react-navigation';
import { createStackNavigator } from 'react-navigation-stack'; (or other)

const navigator = createStackNavigator(all_screens, options)
    all_screens
    ----------
        {
        codeName: reference,
        codeName: reference,
        }

    options
    ----------
        {
            initialRouteName: <name>,
            defaultNavigationOptions: {
                title: <title of the app>
            }
        }

export default createAppContainer(navigator);

__________
The second argument of navigation.navigate can be an object of props.
After that, we can use navigation.getParam(name_of_param) in 
screen we went to.

__________
Component.navigationOptions = () => {
    return {
        headerRight: () => {
            return COMPONENT
        }
    }
}